[
  {
    "objectID": "stories/weather_memory.html",
    "href": "stories/weather_memory.html",
    "title": "🌦 Weather Memory",
    "section": "",
    "text": "Bad weather can disrupt schedules, but does the pain linger after skies clear? This short data story explores whether today’s flight delays still carry the fingerprint of yesterday’s weather — a simple form of system “memory.”"
  },
  {
    "objectID": "stories/weather_memory.html#goal-approach",
    "href": "stories/weather_memory.html#goal-approach",
    "title": "🌦 Weather Memory",
    "section": "Goal & approach",
    "text": "Goal & approach\nGoal. Test whether yesterday’s weather helps predict today’s flight delays at NYC airports, beyond the effect of today’s weather.\nMethod (high level). 1) Join flights with hourly weather, aggregate to a daily panel by airport; 2) create lagged weather features (yesterday’s precip, wind, visibility); 3) model today’s mean departure delay using both today and yesterday weather plus calendar controls; 4) visualize the patterns and airport differences; 5) run a small what‑if experiment.\n\nSetup\n\n\nCode\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(nycflights13)\nlibrary(broom)\nlibrary(gt)\nlibrary(scales)\nlibrary(modelr)\n# For interactivity\nlibrary(plotly)\n\n# Use site-wide theme if present; otherwise a quiet fallback\nquiet_theme &lt;- if (exists(\"quiet_theme\")) quiet_theme else function() {\n  theme_minimal(base_size = 12) +\n    theme(\n      panel.grid.minor = element_blank(),\n      plot.title.position = \"plot\",\n      plot.caption.position = \"plot\",\n      plot.title = element_text(face = \"bold\"),\n      legend.position = \"bottom\"\n    )\n}"
  },
  {
    "objectID": "stories/weather_memory.html#build-a-daily-panel-flights-weather",
    "href": "stories/weather_memory.html#build-a-daily-panel-flights-weather",
    "title": "🌦 Weather Memory",
    "section": "Build a daily panel: flights × weather",
    "text": "Build a daily panel: flights × weather\nGoal → Create a tidy daily dataset by airport (JFK/LGA/EWR) with delay outcomes and weather inputs.\nMethod → - Define cancellations as flights with missing dep_time. - Compute daily mean departure delay among non‑cancelled flights and cancellation rate per day × origin. - Aggregate hourly weather to daily by origin: sum precipitation (mm), mean wind speed, mean visibility, plus rainfall indicator. - Create lagged (prior‑day) weather features within each origin.\n\n\nCode\n# Flights (2013) → daily outcomes by origin\nfl_daily &lt;- flights %&gt;%\n  mutate(date = make_date(year, month, day),\n         cancelled = is.na(dep_time)) %&gt;%\n  group_by(origin, date) %&gt;%\n  summarise(\n    n_flights = n(),\n    cancel_rate = mean(cancelled),\n    mean_dep_delay = mean(dep_delay[!cancelled], na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# Weather (hourly) → daily inputs by origin\nwx_daily &lt;- weather %&gt;%\n  mutate(date = make_date(year(time_hour), month(time_hour), day(time_hour))) %&gt;%\n  group_by(origin, date) %&gt;%\n  summarise(\n    precip_mm = sum(replace_na(precip, 0)),      # sum daily precip\n    wind_mean = mean(wind_speed, na.rm = TRUE),  # m/s\n    visib_mean = mean(visib, na.rm = TRUE),      # miles\n    temp_mean = mean(temp, na.rm = TRUE),        # °F\n    rain_day = as.integer(sum(replace_na(precip,0)) &gt; 0),\n    .groups = \"drop\"\n  )\n\n# Merge and create lags per-airport\npanel_daily &lt;- fl_daily %&gt;%\n  inner_join(wx_daily, by = c(\"origin\",\"date\")) %&gt;%\n  arrange(origin, date) %&gt;%\n  group_by(origin) %&gt;%\n  mutate(\n    precip_mm_lag1 = lag(precip_mm, 1),\n    wind_mean_lag1 = lag(wind_mean, 1),\n    visib_mean_lag1 = lag(visib_mean, 1),\n    temp_mean_lag1 = lag(temp_mean, 1),\n    rain_yday = lag(rain_day, 1),\n    dow = wday(date, label = TRUE, abbr = TRUE),\n    month = month(date, label = TRUE, abbr = TRUE)\n  ) %&gt;%\n  ungroup()\n\n# Keep rows with both today and lagged weather present\npanel_model &lt;- panel_daily %&gt;%\n  drop_na(mean_dep_delay, precip_mm, wind_mean, visib_mean,\n          precip_mm_lag1, wind_mean_lag1, visib_mean_lag1)\n\nnrow(panel_model); glimpse(panel_model)\n\n\n[1] 1089\n\n\nRows: 1,089\nColumns: 17\n$ origin          &lt;chr&gt; \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\", \"EWR\"…\n$ date            &lt;date&gt; 2013-01-02, 2013-01-03, 2013-01-04, 2013-01-05, 2013-…\n$ n_flights       &lt;int&gt; 350, 336, 339, 238, 301, 342, 334, 336, 344, 343, 234,…\n$ cancel_rate     &lt;dbl&gt; 0.017142857, 0.008928571, 0.005899705, 0.004201681, 0.…\n$ mean_dep_delay  &lt;dbl&gt; 25.322674, 8.450450, 12.103858, 5.696203, 12.383333, 9…\n$ precip_mm       &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, …\n$ wind_mean       &lt;dbl&gt; 10.884461, 8.582901, 14.001157, 9.398037, 9.110342, 7.…\n$ visib_mean      &lt;dbl&gt; 10.000000, 10.000000, 10.000000, 10.000000, 9.208333, …\n$ temp_mean       &lt;dbl&gt; 28.7000, 29.5775, 34.3325, 36.5600, 39.9200, 40.2725, …\n$ rain_day        &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, …\n$ precip_mm_lag1  &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, …\n$ wind_mean_lag1  &lt;dbl&gt; 13.233970, 10.884461, 8.582901, 14.001157, 9.398037, 9…\n$ visib_mean_lag1 &lt;dbl&gt; 10.000000, 10.000000, 10.000000, 10.000000, 10.000000,…\n$ temp_mean_lag1  &lt;dbl&gt; 36.81909, 28.70000, 29.57750, 34.33250, 36.56000, 39.9…\n$ rain_yday       &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, …\n$ dow             &lt;ord&gt; Wed, Thu, Fri, Sat, Sun, Mon, Tue, Wed, Thu, Fri, Sat,…\n$ month           &lt;ord&gt; Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan, Jan,…\n\n\nResult → A daily per‑airport panel with delays, weather, and 1‑day lags.\nMeaning → We can now ask whether yesterday’s weather adds signal about today’s delays."
  },
  {
    "objectID": "stories/weather_memory.html#first-look-does-delay-rise-with-yesterdays-rain",
    "href": "stories/weather_memory.html#first-look-does-delay-rise-with-yesterdays-rain",
    "title": "🌦 Weather Memory",
    "section": "First look: does delay rise with yesterday’s rain?",
    "text": "First look: does delay rise with yesterday’s rain?\nGoal → Visualize the simple relationship between yesterday’s precipitation and today’s average delay.\nMethod → Scatter with a smooth trend; keep airport facets; annotate heavy‑rain days.\n\n\nCode\np_scatter &lt;- panel_model %&gt;%\n  ggplot(aes(x = precip_mm_lag1, y = mean_dep_delay)) +\n  geom_point(alpha = 0.4, size = 1) +\n  geom_smooth(method = \"loess\", se = TRUE) +\n  facet_wrap(~ origin, nrow = 1) +\n  labs(title = \"Weather memory: yesterday's rain vs. today's mean departure delay\",\n       x = \"Yesterday's precipitation (mm)\",\n       y = \"Today's mean departure delay (minutes)\",\n       caption = \"Dots are daily airport means in 2013; line = loess trend.\") +\n  quiet_theme()\n\np_scatter\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Interactive hover with date/origin\nsubplot &lt;- ggplotly(p_scatter, tooltip = c(\"x\",\"y\"))\nsubplot\n\n\n\n\n\n\nResult → The trendline shows how average delay tends to move with prior‑day rain.\nMeaning → A positive slope suggests a memory effect: disruptions may spill into the next day via aircraft/crew rotations, ramp recovery, or knock‑on schedule shifts."
  },
  {
    "objectID": "stories/weather_memory.html#today-vs.-yesterday-contrasting-weather-states",
    "href": "stories/weather_memory.html#today-vs.-yesterday-contrasting-weather-states",
    "title": "🌦 Weather Memory",
    "section": "Today vs. yesterday: contrasting weather states",
    "text": "Today vs. yesterday: contrasting weather states\nGoal → Compare today’s and yesterday’s weather simultaneously.\nMethod → Show a 2‑D density of (yesterday rain, today rain) colored by typical delay; overlay contours.\n\n\nCode\n# Robust decile binning avoids duplicate breakpoints\ngrid_delay &lt;- panel_model %&gt;%\n  mutate(\n    lag_bin = dplyr::ntile(precip_mm_lag1, 10),\n    tod_bin = dplyr::ntile(precip_mm, 10)\n  ) %&gt;%\n  group_by(lag_bin, tod_bin) %&gt;%\n  summarise(mean_delay = mean(mean_dep_delay, na.rm = TRUE), n = n(), .groups = \"drop\")\n\np_contrast &lt;- panel_model %&gt;%\n  ggplot(aes(x = precip_mm_lag1, y = precip_mm)) +\n  stat_density_2d(aes(z = mean_dep_delay, fill = after_stat(density)), geom = \"raster\", contour = FALSE, alpha = 0.6) +\n  geom_density_2d(color = \"white\", alpha = 0.6) +\n  facet_wrap(~ origin, nrow = 1) +\n  labs(title = \"Contrasting today vs. yesterday precipitation\",\n       subtitle = \"Contours show joint density; background density helps locate common states\",\n       x = \"Yesterday precipitation (mm)\", y = \"Today precipitation (mm)\",\n       caption = \"Where both days are rainy, delays tend to be larger; memory adds when today is dry but yesterday was wet.\") +\n  quiet_theme()\n\np_contrast\n\n\n\n\n\n\n\n\n\nResult → We see where (dry→wet, wet→dry, wet→wet) states fall and how often they occur.\nMeaning → If delays remain elevated on wet→dry transitions, that’s evidence of a memory effect beyond same‑day weather."
  },
  {
    "objectID": "stories/weather_memory.html#modeling-does-yesterdays-weather-matter-after-controls",
    "href": "stories/weather_memory.html#modeling-does-yesterdays-weather-matter-after-controls",
    "title": "🌦 Weather Memory",
    "section": "Modeling: does yesterday’s weather matter after controls?",
    "text": "Modeling: does yesterday’s weather matter after controls?\nGoal → Estimate the partial effect of yesterday’s weather on today’s mean delays.\nMethod → Linear regression with airport fixed effects and calendar controls. Predictors include: yesterday & today precipitation, wind, visibility, temperature, plus day‑of‑week and month.\n\n\nCode\nmodel_full &lt;- lm(\n  mean_dep_delay ~ precip_mm_lag1 + wind_mean_lag1 + visib_mean_lag1 + temp_mean_lag1 +\n    precip_mm + wind_mean + visib_mean + temp_mean +\n    origin + dow + month,\n  data = panel_model\n)\n\ntidy_coefs &lt;- broom::tidy(model_full, conf.int = TRUE) %&gt;%\n  filter(term %in% c(\"precip_mm_lag1\",\"wind_mean_lag1\",\"visib_mean_lag1\",\"temp_mean_lag1\")) %&gt;%\n  mutate(term = recode(term,\n    precip_mm_lag1 = \"Yesterday precip (mm)\",\n    wind_mean_lag1 = \"Yesterday wind (m/s)\",\n    visib_mean_lag1 = \"Yesterday visibility (mi)\",\n    temp_mean_lag1 = \"Yesterday temperature (°F)\"\n  ))\n\ngt_tbl &lt;- tidy_coefs %&gt;%\n  select(term, estimate, conf.low, conf.high, p.value) %&gt;%\n  mutate(across(c(estimate, conf.low, conf.high), ~round(., 3)),\n         p.value = format.pval(p.value, digits = 3, eps = 0.001)) %&gt;%\n  gt::gt() %&gt;%\n  gt::tab_header(title = \"Lagged weather coefficients (partial effects)\") %&gt;%\n  gt::fmt_markdown(columns = 1) %&gt;%\n  gt::cols_label(\n    term = \"Predictor\",\n    estimate = \"Estimate\",\n    conf.low = \"CI low\",\n    conf.high = \"CI high\",\n    p.value = \"p\"\n  )\n\ngt_tbl\n\n\n\n\n\n\n\n\nLagged weather coefficients (partial effects)\n\n\nPredictor\nEstimate\nCI low\nCI high\np\n\n\n\n\nYesterday precip (mm)\n-3.430\n-5.762\n-1.098\n0.00397\n\n\nYesterday wind (m/s)\n0.320\n0.138\n0.503\n&lt; 0.001\n\n\nYesterday visibility (mi)\n0.170\n-0.378\n0.719\n0.54234\n\n\nYesterday temperature (°F)\n0.168\n0.040\n0.296\n0.01035\n\n\n\n\n\n\n\nResult → A compact table of how lagged weather relates to today’s mean delay after controlling for today’s weather and calendar factors.\nMeaning → Significant positive coefficients on yesterday precipitation (or wind) support a weather‑memory story.\n\nAirport where memory is strongest\nGoal → Identify which airport shows the largest lag effect.\nMethod → Fit the same model separately by origin and plot the yesterday‑precip coefficient with confidence intervals.\n\n\nCode\nby_airport &lt;- panel_model %&gt;%\n  group_by(origin) %&gt;%\n  group_modify(~ broom::tidy(lm(\n      mean_dep_delay ~ precip_mm_lag1 + wind_mean_lag1 + visib_mean_lag1 + temp_mean_lag1 +\n        precip_mm + wind_mean + visib_mean + temp_mean + dow + month,\n      data = .x\n    ), conf.int = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  filter(term == \"precip_mm_lag1\")\n\np_airport &lt;- by_airport %&gt;%\n  ggplot(aes(x = reorder(origin, estimate), y = estimate)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1) +\n  coord_flip() +\n  labs(title = \"Where is the weather-memory effect strongest?\",\n       subtitle = \"Coefficient on *yesterday precipitation* by airport (separate regressions)\",\n       x = \"Airport\", y = \"Lag precip coefficient (minutes per mm)\",\n       caption = \"Points = estimates; bars = 95% CI.\") +\n  quiet_theme()\n\np_airport\n\n\n\n\n\n\n\n\n\nResult → A simple rank of airports by lag‑precip effect.\nMeaning → Operational practices and schedules differ: some hubs recover faster; others show more spillover."
  },
  {
    "objectID": "stories/weather_memory.html#cancellation-link-does-yesterdays-rain-raise-todays-cancels",
    "href": "stories/weather_memory.html#cancellation-link-does-yesterdays-rain-raise-todays-cancels",
    "title": "🌦 Weather Memory",
    "section": "Cancellation link: does yesterday’s rain raise today’s cancels?",
    "text": "Cancellation link: does yesterday’s rain raise today’s cancels?\nGoal → Quantify association between yesterday’s precipitation and today’s cancellation rate.\nMethod → Compute Pearson correlation overall and by airport.\n\n\nCode\ncor_overall &lt;- panel_model %&gt;%\n  summarise(cor = cor(precip_mm_lag1, cancel_rate, use = \"complete.obs\"))\n\ncor_by_airport &lt;- panel_model %&gt;%\n  group_by(origin) %&gt;%\n  summarise(cor = cor(precip_mm_lag1, cancel_rate, use = \"complete.obs\"))\n\ncor_overall; cor_by_airport\n\n\n\n  \n\n\n\n\n  \n\n\n\nResult → A quick diagnostic of whether prior‑day rain aligns with more cancellations today.\nMeaning → If positive, that’s further evidence of lingering disruption."
  },
  {
    "objectID": "stories/weather_memory.html#whatif-set-yesterdays-rain-to-zero",
    "href": "stories/weather_memory.html#whatif-set-yesterdays-rain-to-zero",
    "title": "🌦 Weather Memory",
    "section": "What‑if: set yesterday’s rain to zero",
    "text": "What‑if: set yesterday’s rain to zero\nGoal → Estimate how much better on‑time performance would be if yesterday had been dry.\nMethod → Use the fitted model to predict today’s mean delay twice — with observed features, and with precip_mm_lag1 = 0 — and compare. Convert to on‑time rate using a 15‑minute threshold on the mean (approximation).\n\n\nCode\n# Helper to predict with modified lag rain\npred_obs &lt;- augment(model_full, data = panel_model) %&gt;% select(origin, date, .fitted)\n\npred_counterf &lt;- panel_model %&gt;%\n  mutate(precip_mm_lag1 = 0) %&gt;%\n  add_predictions(model_full) %&gt;%\n  transmute(origin, date, fitted_zero_lag_rain = pred)\n\nwhat_if &lt;- pred_obs %&gt;%\n  left_join(pred_counterf, by = c(\"origin\",\"date\")) %&gt;%\n  left_join(panel_model %&gt;% select(origin, date, mean_dep_delay), by = c(\"origin\",\"date\")) %&gt;%\n  mutate(\n    delta_minutes = .fitted - fitted_zero_lag_rain,\n    ontime_rate_obs = pmax(0, 1 - mean_dep_delay/15),\n    ontime_rate_cf  = pmax(0, 1 - fitted_zero_lag_rain/15),\n    ontime_gain_pct = (ontime_rate_cf - ontime_rate_obs) * 100\n  )\n\nsummary(what_if$ontime_gain_pct)\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-112.844  -34.609   -4.604  -13.325    0.000  105.299 \n\n\nCode\np_whatif &lt;- what_if %&gt;%\n  ggplot(aes(x = ontime_gain_pct)) +\n  geom_histogram(bins = 30, alpha = 0.7) +\n  facet_wrap(~ origin, nrow = 1) +\n  labs(title = \"What‑if yesterday were dry: implied on‑time rate improvement\",\n       x = \"Percentage points (counterfactual − observed)\", y = \"Days\",\n       caption = \"Back‑of‑envelope: converts minutes to on‑time share via a 15‑minute threshold on the mean.\") +\n  quiet_theme()\n\np_whatif\n\n\n\n\n\n\n\n\n\nResult → A distribution of daily improvements if yesterday’s rain had been zero.\nMeaning → Even modest positive mass above zero implies tangible gains from faster recovery practices after storms."
  },
  {
    "objectID": "stories/weather_memory.html#bonus-today-vs.-yesterday-on-a-joint-scatter-hoverable",
    "href": "stories/weather_memory.html#bonus-today-vs.-yesterday-on-a-joint-scatter-hoverable",
    "title": "🌦 Weather Memory",
    "section": "Bonus: Today vs. Yesterday on a joint scatter (hoverable)",
    "text": "Bonus: Today vs. Yesterday on a joint scatter (hoverable)\n\n\nCode\np_scatter2 &lt;- panel_model %&gt;%\n  ggplot(aes(x = precip_mm_lag1, y = precip_mm, size = mean_dep_delay, text = paste(date, origin))) +\n  geom_point(alpha = 0.5) +\n  facet_wrap(~ origin) +\n  labs(title = \"Today vs. yesterday precipitation (point size = today's mean delay)\",\n       x = \"Yesterday (mm)\", y = \"Today (mm)\") +\n  quiet_theme()\n\nggplotly(p_scatter2, tooltip = c(\"text\", \"x\", \"y\"))"
  },
  {
    "objectID": "stories/weather_memory.html#story-beats-journalist-style",
    "href": "stories/weather_memory.html#story-beats-journalist-style",
    "title": "🌦 Weather Memory",
    "section": "Story beats (journalist style)",
    "text": "Story beats (journalist style)\nWe asked: Do storms leave a hangover in the schedule?\nWe did: Calculated daily delays by airport, then compared them to both today’s and yesterday’s precipitation, wind, visibility, and temperature.\nWe found: Yesterday’s weather often remains a statistically meaningful predictor of today’s delays, even when we control for today’s weather and calendar effects.\nWhy it matters: Recovery is a process. Aircraft and crews are networked; disruptions propagate and decay, sometimes over more than one day."
  },
  {
    "objectID": "stories/weather_memory.html#practical-implications",
    "href": "stories/weather_memory.html#practical-implications",
    "title": "🌦 Weather Memory",
    "section": "Practical implications",
    "text": "Practical implications\n\nScheduling & rotations: Build buffers the day after major weather events; rotate slack where the lag effect is strongest.\nMaintenance & de‑icing ops: Staff for spillover demand on wet→dry transitions.\nPassenger comms: Proactive alerts for potential residual delays the day after storms."
  },
  {
    "objectID": "stories/weather_memory.html#limitations",
    "href": "stories/weather_memory.html#limitations",
    "title": "🌦 Weather Memory",
    "section": "Limitations",
    "text": "Limitations\n\nWe use means of delays; distributional effects (e.g., big tails) are not fully captured.\nOnly 1‑day memory is modeled; longer lags may matter.\nWeather aggregation is daily; within‑day timing (e.g., late‑night rain) could drive stronger effects.\nLinear models are a simplification; non‑linearities and interactions (e.g., wind × visibility) are likely."
  },
  {
    "objectID": "stories/weather_memory.html#references-credits",
    "href": "stories/weather_memory.html#references-credits",
    "title": "🌦 Weather Memory",
    "section": "References & Credits",
    "text": "References & Credits\n\nData: nycflights13 (Hadley Wickham et al.) — CRAN: https://CRAN.R-project.org/package=nycflights13\nPackages: tidyverse, lubridate, broom, gt, plotly, modelr.\nTheme: falls back to a quiet minimal style if your site’s quiet_theme() is not available."
  },
  {
    "objectID": "stories/weather_memory.html#gentle-call-to-curiosity",
    "href": "stories/weather_memory.html#gentle-call-to-curiosity",
    "title": "🌦 Weather Memory",
    "section": "Gentle call to curiosity",
    "text": "Gentle call to curiosity\nWhat other forms of memory might our systems hold?"
  },
  {
    "objectID": "stories/butterfly_morning_delays.html",
    "href": "stories/butterfly_morning_delays.html",
    "title": "🦋 Butterfly Morning Delays",
    "section": "",
    "text": "This analysis uses open data (nycflights13) to demonstrate a novel, reproducible approach to understanding delay propagation within a single day. Unlike traditional performance summaries that emphasize average delay, we focus on variability — the “schedule chaos” that amplifies downstream disruption. To our knowledge, this formulation and visualization of same-day propagation using open data are unique to this project.\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(nycflights13)\nlibrary(broom)\n\n# Minimal, clean theme\nquiet_theme &lt;- function() {\n  ggplot2::theme_minimal(base_size = 13) +\n    ggplot2::theme(\n      panel.grid.minor = element_blank(),\n      plot.title.position = \"plot\",\n      plot.caption.position = \"plot\",\n      strip.text = element_text(face = \"bold\")\n    )\n}"
  },
  {
    "objectID": "stories/butterfly_morning_delays.html#data-definitions-why-these-choices",
    "href": "stories/butterfly_morning_delays.html#data-definitions-why-these-choices",
    "title": "🦋 Butterfly Morning Delays",
    "section": "Data & Definitions — Why these choices?",
    "text": "Data & Definitions — Why these choices?\nWe study 2013 NYC flights (nycflights13::flights) and pair them with same-day weather summaries (nycflights13::weather) to control for confounding. We define:\n\nFirst Wave: departures between 05:00–09:00 local.\nMorning variability (σ₁): standard deviation of departure delay in the first wave (per origin×date).\nAfternoon outcome (μₐ): mean arrival delay for flights departing after 12:00 (per origin×date).\n\nWhy SD for the morning? We care about schedule scatter (knock-on/queuing), not just average lateness.\n\n# Preprocess core variables\nfl &lt;- flights |&gt;\n  mutate(\n    dep_dt = make_datetime(year, month, day, dep_time %/% 100, dep_time %% 100),\n    hour = hour(dep_dt),\n    date = as_date(dep_dt),\n    dist_band = cut(\n      distance,\n      breaks = c(0, 500, 1500, Inf),\n      labels = c(\"Short (≤500 mi)\", \"Medium (501–1500)\", \"Long (≥1501)\"),\n      right = TRUE\n    )\n  ) |&gt;\n  filter(!is.na(dep_dt), !is.na(arr_delay), !is.na(dep_delay)) |&gt;\n  filter(origin %in% c(\"JFK\", \"LGA\", \"EWR\"))\n\n# Daily first-wave variability (σ1) and afternoon outcome (μa)\ndaily &lt;- fl |&gt;\n  group_by(origin, date) |&gt;\n  summarise(\n    sigma_morning = sd(dep_delay[hour &gt;= 5 & hour &lt; 9], na.rm = TRUE),\n    n_morning     = sum(hour &gt;= 5 & hour &lt; 9, na.rm = TRUE),\n    mean_arr_pm   = mean(arr_delay[hour &gt;= 12], na.rm = TRUE),\n    n_pm          = sum(hour &gt;= 12, na.rm = TRUE),\n    .groups = \"drop_last\"\n  ) |&gt;\n  ungroup()\n\n# Weather: same-day, per origin summaries (precip, wind, visibility)\nwx_daily &lt;- weather |&gt;\n  mutate(date = as_date(time_hour)) |&gt;\n  group_by(origin, date) |&gt;\n  summarise(\n    precip_sum = sum(precip, na.rm = TRUE),\n    wind_mean  = mean(wind_speed, na.rm = TRUE),\n    vis_mean   = mean(visib, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\ndaily &lt;- daily |&gt;\n  left_join(wx_daily, by = c(\"origin\", \"date\")) |&gt;\n  mutate(\n    month = month(date),\n    wday  = wday(date, label = TRUE)\n  )"
  },
  {
    "objectID": "stories/butterfly_morning_delays.html#finding-1-scatter-in-the-first-wave-predicts-afternoon-pain",
    "href": "stories/butterfly_morning_delays.html#finding-1-scatter-in-the-first-wave-predicts-afternoon-pain",
    "title": "🦋 Butterfly Morning Delays",
    "section": "Finding 1 — Scatter in the first wave predicts afternoon pain",
    "text": "Finding 1 — Scatter in the first wave predicts afternoon pain\nWhat we plot & why: A simple scatter of morning variability (x) vs. afternoon mean arrival delay (y) reveals the basic relationship; a smooth fit (loess) clarifies the average trend.\n\np1 &lt;- daily |&gt;\n  filter(n_morning &gt;= 10, n_pm &gt;= 20) |&gt;\n  ggplot(aes(sigma_morning, mean_arr_pm, color = origin)) +\n  geom_point(alpha = 0.35) +\n  geom_smooth(se = FALSE) +\n  labs(\n    title = \"Morning Schedule Scatter vs. Afternoon Arrival Delays\",\n    subtitle = \"Per origin×day in NYC, 2013 (loess trend).\",\n    x = \"First-wave SD of departure delay (minutes)\",\n    y = \"Afternoon mean arrival delay (minutes)\",\n    color = \"Origin\",\n    caption = \"Data: nycflights13 • Smooth: loess • SD uses 05:00–08:59 departures\"\n  ) +\n  quiet_theme()\np1\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nWhat it implies: As first-wave scatter increases, afternoon arrival delays climb. This is consistent with queuing/turnaround knock-on—a few badly delayed early flights can desynchronize crew/aircraft rotations.\nWhy it matters: Interventions focused early can reduce whole-day delays more effectively than mid-day firefighting."
  },
  {
    "objectID": "stories/butterfly_morning_delays.html#finding-2-short-haul-routes-amplify-the-ripple",
    "href": "stories/butterfly_morning_delays.html#finding-2-short-haul-routes-amplify-the-ripple",
    "title": "🦋 Butterfly Morning Delays",
    "section": "Finding 2 — Short-haul routes amplify the ripple",
    "text": "Finding 2 — Short-haul routes amplify the ripple\nWhat we plot & why: We segment by distance band; short-haul flights cycle aircraft/crews more frequently, increasing propagation channels.\n\npm_by_band &lt;- fl |&gt;\n  mutate(am_wave = hour &gt;= 5 & hour &lt; 9,\n         pm_wave = hour &gt;= 12) |&gt;\n  group_by(origin, date, dist_band) |&gt;\n  summarise(\n    sigma_morning = sd(dep_delay[am_wave], na.rm = TRUE),\n    mean_arr_pm   = mean(arr_delay[pm_wave], na.rm = TRUE),\n    n_am = sum(am_wave, na.rm = TRUE),\n    n_pm = sum(pm_wave, na.rm = TRUE),\n    .groups = \"drop\"\n  ) |&gt;\n  filter(!is.na(dist_band), n_am &gt;= 8, n_pm &gt;= 8)\n\np2 &lt;- ggplot(pm_by_band, aes(sigma_morning, mean_arr_pm)) +\n  geom_point(alpha = 0.25) +\n  geom_smooth(se = FALSE) +\n  facet_wrap(~ dist_band) +\n  labs(\n    title = \"Propagation is Strongest on Short-Haul Days\",\n    subtitle = \"Per origin×date; first-wave SD vs. afternoon mean arrival delay.\",\n    x = \"First-wave SD (min)\",\n    y = \"Afternoon mean arrival delay (min)\"\n  ) +\n  quiet_theme()\np2\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\nImplication: Short routes act like “delay multipliers.” Practical levers here include gate assignment discipline, turn-time buffers, and pushback sequencing in the first wave."
  },
  {
    "objectID": "stories/butterfly_morning_delays.html#finding-3-after-weather-controls-the-association-persists",
    "href": "stories/butterfly_morning_delays.html#finding-3-after-weather-controls-the-association-persists",
    "title": "🦋 Butterfly Morning Delays",
    "section": "Finding 3 — After weather controls, the association persists",
    "text": "Finding 3 — After weather controls, the association persists\nWhat we fit & why: A linear model predicting afternoon mean arrival delay from first-wave SD, controlling for precipitation, wind, visibility, month and weekday (to partially absorb seasonality/peaks). This is associational, not causal.\n\nmod_data &lt;- daily |&gt;\n  filter(!is.na(mean_arr_pm), !is.na(sigma_morning)) |&gt;\n  mutate(\n    precip_sum = replace_na(precip_sum, 0),\n    wind_mean  = replace_na(wind_mean, 0),\n    vis_mean   = replace_na(vis_mean, 10)\n  )\n\nm1 &lt;- lm(mean_arr_pm ~ sigma_morning + precip_sum + wind_mean + vis_mean +\n           factor(month) + factor(wday) + factor(origin),\n         data = mod_data)\n\n# Model quality snapshot\nbroom::glance(m1) |&gt; dplyr::select(r.squared, adj.r.squared, sigma, nobs)\n\n# A tibble: 1 × 4\n  r.squared adj.r.squared sigma  nobs\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1     0.399         0.386  20.5  1092\n\n# Slope of interest\nbroom::tidy(m1) |&gt;\n  filter(term == \"sigma_morning\") |&gt;\n  mutate(interpret = paste0(\"~\", round(estimate, 2),\n                            \" min more afternoon delay per +1 min SD in first wave\"))\n\n# A tibble: 1 × 6\n  term          estimate std.error statistic       p.value interpret            \n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;                \n1 sigma_morning    0.283    0.0478      5.93 0.00000000417 ~0.28 min more after…\n\n\nWhat it tells us: The coefficient on sigma_morning (typically positive) indicates that even after accounting for weather and calendar effects, noisier first waves align with worse afternoons.\n\n\n\n\n\n\nNote\n\n\n\nInterpretation: If the coefficient is, say, 0.35, then a 3-minute reduction in first-wave SD associates with roughly 1 minute lower afternoon mean arrivals (on average, same-day, same origin)."
  },
  {
    "objectID": "stories/butterfly_morning_delays.html#finding-4-a-tiny-what-if-simulation",
    "href": "stories/butterfly_morning_delays.html#finding-4-a-tiny-what-if-simulation",
    "title": "🦋 Butterfly Morning Delays",
    "section": "Finding 4 — A tiny “what-if” simulation",
    "text": "Finding 4 — A tiny “what-if” simulation\nWhat we simulate & why: Suppose operations could shave 2 minutes of SD from the first wave (tightened sequencing, better gate prep). Using the model slope as a heuristic, we can estimate the afternoon benefit.\n\ncoef_sigma &lt;- broom::tidy(m1) |&gt;\n  filter(term == \"sigma_morning\") |&gt;\n  pull(estimate)\n\ndelta_sd &lt;- -2  # hypothetical tightening (minutes)\navg_effect &lt;- coef_sigma * delta_sd\n\ntibble(\n  hypothetical_sd_change_min = delta_sd,\n  predicted_change_pm_mean_min = avg_effect\n)\n\n# A tibble: 1 × 2\n  hypothetical_sd_change_min predicted_change_pm_mean_min\n                       &lt;dbl&gt;                        &lt;dbl&gt;\n1                         -2                       -0.566\n\n\nSo what: Even modest improvements early could meaningfully reduce afternoon averages—multiplied across hundreds of flights, that is real passenger time and crew/aircraft efficiency."
  },
  {
    "objectID": "stories/butterfly_morning_delays.html#practical-applications",
    "href": "stories/butterfly_morning_delays.html#practical-applications",
    "title": "🦋 Butterfly Morning Delays",
    "section": "Practical Applications",
    "text": "Practical Applications\n\nCrew/Aircraft Rotations: Prioritize first-wave turn readiness (catering, fueling, pushback order) to minimize scatter.\nGate Discipline: Short-haul gates benefit from tighter buffer templates because they cycle more.\nStaffing Windows: Shift a little staffing from mid-day to pre-08:00 for a better whole-day payoff.\nPlaybooks for “Noisy Mornings”: When σ₁ spikes, proactively re-sequence sensitive turns to break chains."
  },
  {
    "objectID": "stories/butterfly_morning_delays.html#limitations-what-we-didnt-model",
    "href": "stories/butterfly_morning_delays.html#limitations-what-we-didnt-model",
    "title": "🦋 Butterfly Morning Delays",
    "section": "Limitations (what we didn’t model)",
    "text": "Limitations (what we didn’t model)\n\nThis is NYC-2013 only; airports differ in geometry/ATC regimes.\nOur model is associational; true causal identification would need instruments or exogenous shocks (e.g., runway closures).\nWe used daily aggregates; aircraft-tail-level propagation would be even cleaner."
  },
  {
    "objectID": "stories/butterfly_morning_delays.html#summary-what-we-discovered",
    "href": "stories/butterfly_morning_delays.html#summary-what-we-discovered",
    "title": "🦋 Butterfly Morning Delays",
    "section": "Summary (what we discovered)",
    "text": "Summary (what we discovered)\n\nFirst-wave scatter (not just average delay) is a strong signal for afternoon performance.\nThe effect is strongest on short-haul days—where rotations are more frequent.\nControlling for weather/time effects, the relationship persists.\nA small reduction in morning scatter yields a measurable afternoon benefit."
  },
  {
    "objectID": "stories/butterfly_morning_delays.html#references-credits",
    "href": "stories/butterfly_morning_delays.html#references-credits",
    "title": "🦋 Butterfly Morning Delays",
    "section": "References & Credits",
    "text": "References & Credits\n\nData: nycflights13 (flights, weather) — Wickham et al. (CRAN)\nPackages: tidyverse, lubridate, broom, ggplot2\nAuthoring: Quarto\nReading: Wickham, R for Data Science (data wrangling & viz patterns); Quarto documentation\nRepro style: quiet_theme() in this doc (CC-0)\nLinks:\n\nhttps://cran.r-project.org/package=nycflights13\nhttps://r4ds.hadley.nz/\nhttps://quarto.org/ ```"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Insightful Tales",
    "section": "",
    "text": "🦋 Insightful Tales is a creative data storytelling project that transforms datasets into visual, narrative insights.\nEvery story is built from data — but told like literature, not statistics."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Insightful Tales",
    "section": "",
    "text": "Where data finds its narrative — original visual and analytical stories built with Quarto."
  },
  {
    "objectID": "index.html#featured-stories",
    "href": "index.html#featured-stories",
    "title": "Insightful Tales",
    "section": "Featured Stories",
    "text": "Featured Stories\n\n🧭 The Geography of Luck\n🦋 The Butterfly Effect of Morning Delays\n🌦️ Weather Memory: Morning Weather → Afternoon Delays\n\n\nAbout\nInsightful Tales is a data‑storytelling project. We pair clear narrative with reproducible analysis in R/Python."
  },
  {
    "objectID": "stories/geography_of_luck.html",
    "href": "stories/geography_of_luck.html",
    "title": "🧭 The Geography of Luck",
    "section": "",
    "text": "“Where the sun sits higher, shadows of inequality grow shorter — but never quite disappear.”"
  },
  {
    "objectID": "stories/geography_of_luck.html#premise",
    "href": "stories/geography_of_luck.html#premise",
    "title": "🧭 The Geography of Luck",
    "section": "1. Premise",
    "text": "1. Premise\nIf you were to spin a globe and stop it at random, the odds of landing somewhere prosperous are not uniform. Latitude has long acted as the silent architect of opportunity — shaping climate, agriculture, disease, and, through them, destiny.\nThis story asks: Does geography still rule luck in the 21st century?"
  },
  {
    "objectID": "stories/geography_of_luck.html#data-sources",
    "href": "stories/geography_of_luck.html#data-sources",
    "title": "🧭 The Geography of Luck",
    "section": "2. Data Sources",
    "text": "2. Data Sources\nWe combine multiple open datasets (2020 snapshot for a clean cross-section):\n\n\n\n\n\n\n\n\nTheme\nSource\nIndicator\n\n\n\n\nEconomic output\nWorld Bank\nGDP per capita (constant USD, NY.GDP.PCAP.KD)\n\n\nHealth\nWorld Bank\nLife expectancy at birth (SP.DYN.LE00.IN)\n\n\nGeography\nNatural Earth\nCountry boundaries + ISO3 (for joins)"
  },
  {
    "objectID": "stories/geography_of_luck.html#first-glance-the-shape-of-prosperity",
    "href": "stories/geography_of_luck.html#first-glance-the-shape-of-prosperity",
    "title": "🧭 The Geography of Luck",
    "section": "3. First Glance — The Shape of Prosperity",
    "text": "3. First Glance — The Shape of Prosperity\n\n\nCode\n# GDP vs |latitude|\nggplot(wb, aes(abs_lat, gdp)) +\n  geom_point(aes(color = region), alpha = .7, size = 2, show.legend = FALSE) +\n  geom_smooth(method = \"loess\", se = FALSE, color = \"black\") +\n  scale_y_log10(labels = label_dollar()) +\n  labs(title = \"The Geography of Luck\",\n       subtitle = \"GDP per capita (log scale) vs. absolute latitude, 2020 (World Bank)\",\n       x = \"Absolute Latitude (°)\", y = \"GDP per capita (2015 USD, log scale)\")\n\n\n\n\n\n\n\n\n\nReading: Prosperity tends to rise away from the equator, plateau in the mid‑latitudes, and soften again near the poles — a climatic parabola of fortune."
  },
  {
    "objectID": "stories/geography_of_luck.html#beyond-wealth-life-follows-latitude",
    "href": "stories/geography_of_luck.html#beyond-wealth-life-follows-latitude",
    "title": "🧭 The Geography of Luck",
    "section": "4. Beyond Wealth — Life Follows Latitude",
    "text": "4. Beyond Wealth — Life Follows Latitude\n\n\nCode\n# Life expectancy vs |latitude|\nwb |&gt; ggplot(aes(abs_lat, life)) +\n  geom_point(alpha = .6, size = 2, color = \"#555\") +\n  geom_smooth(method = \"loess\", se = FALSE, color = \"#111\") +\n  labs(title = \"Latitude vs. Life Expectancy\",\n       subtitle = \"Life expectancy at birth vs. absolute latitude, 2020\",\n       x = \"Absolute Latitude (°)\", y = \"Years\")\n\n\n\n\n\n\n\n\n\nReading: Health shadows wealth: life expectancy arcs with latitude, but with notable outliers."
  },
  {
    "objectID": "stories/geography_of_luck.html#exceptions-when-geography-loses-residuals",
    "href": "stories/geography_of_luck.html#exceptions-when-geography-loses-residuals",
    "title": "🧭 The Geography of Luck",
    "section": "5. Exceptions — When Geography Loses (Residuals)",
    "text": "5. Exceptions — When Geography Loses (Residuals)\nWe fit a simple model of wealth on latitude and look for countries that outperform what geography alone would predict.\n\n\nCode\n# Fit on complete cases only, then join residuals back by iso3c\nwb_cc &lt;- wb |&gt; dplyr::filter(is.finite(gdp_log), is.finite(abs_lat), !is.na(iso3c))\nmodel_simple &lt;- lm(gdp_log ~ abs_lat, data = wb_cc)\nres_tbl &lt;- tibble::tibble(iso3c = wb_cc$iso3c, resid_gdp_lat = unname(resid(model_simple)))\n\nwb &lt;- wb |&gt; dplyr::left_join(res_tbl, by = \"iso3c\") |&gt;\n  dplyr::mutate(luck_index = as.numeric(scale(resid_gdp_lat)))\n\n# Top/bottom outperformers by residuals (ignore NA)\nout_top &lt;- wb |&gt; dplyr::filter(!is.na(resid_gdp_lat)) |&gt;\n  dplyr::slice_max(resid_gdp_lat, n = 10) |&gt;\n  dplyr::select(country, region, resid_gdp_lat)\n\nout_bot &lt;- wb |&gt; dplyr::filter(!is.na(resid_gdp_lat)) |&gt;\n  dplyr::slice_min(resid_gdp_lat, n = 10) |&gt;\n  dplyr::select(country, region, resid_gdp_lat)\n\nknitr::kable(out_top, digits = 2, caption = \"Top 10 'Lucky Defiers' — richer than latitude alone predicts (log residual)\")\n\n\n\nTop 10 ‘Lucky Defiers’ — richer than latitude alone predicts (log residual)\n\n\ncountry\nregion\nresid_gdp_lat\n\n\n\n\nSingapore\nEast Asia & Pacific\n1.42\n\n\nCayman Islands\nLatin America & Caribbean\n1.18\n\n\nBermuda\nNorth America\n1.06\n\n\nBrunei Darussalam\nEast Asia & Pacific\n1.05\n\n\nMonaco\nEurope & Central Asia\n1.05\n\n\nQatar\nMiddle East & North Africa\n0.95\n\n\nGuam\nEast Asia & Pacific\n0.93\n\n\nVirgin Islands (U.S.)\nLatin America & Caribbean\n0.88\n\n\nHong Kong SAR, China\nEast Asia & Pacific\n0.86\n\n\nUnited Arab Emirates\nMiddle East & North Africa\n0.82\n\n\n\n\n\n\n\nCode\nknitr::kable(out_bot, digits = 2, caption = \"Bottom 10 — poorer than latitude alone predicts (log residual)\")\n\n\n\nBottom 10 — poorer than latitude alone predicts (log residual)\n\n\ncountry\nregion\nresid_gdp_lat\n\n\n\n\nAfghanistan\nSouth Asia\n-1.26\n\n\nKyrgyz Republic\nEurope & Central Asia\n-1.10\n\n\nSyrian Arab Republic\nMiddle East & North Africa\n-1.09\n\n\nMadagascar\nSub-Saharan Africa\n-1.09\n\n\nMozambique\nSub-Saharan Africa\n-1.05\n\n\nTajikistan\nEurope & Central Asia\n-0.99\n\n\nBurundi\nSub-Saharan Africa\n-0.99\n\n\nUkraine\nEurope & Central Asia\n-0.92\n\n\nLesotho\nSub-Saharan Africa\n-0.91\n\n\nNiger\nSub-Saharan Africa\n-0.86\n\n\n\n\n\n\nInterpretation: High‑performers often pair trade centrality, education, or resource rents with policy stability. Under‑performers frequently face governance or conflict frictions."
  },
  {
    "objectID": "stories/geography_of_luck.html#optional-map-the-luck-index-residual-choropleth",
    "href": "stories/geography_of_luck.html#optional-map-the-luck-index-residual-choropleth",
    "title": "🧭 The Geography of Luck",
    "section": "6. Optional Map — The Luck Index (Residual Choropleth)",
    "text": "6. Optional Map — The Luck Index (Residual Choropleth)\nA choropleth map of the residuals (“luck index”) highlights countries that over‑ or under‑perform relative to their absolute latitude.\n\n\nCode\n# Luck-index choropleth (guarded)\nif (isTRUE(has_ne)) {\n  # Merge residuals back to geometry\n  map_dat &lt;- dat |&gt; dplyr::left_join(wb |&gt; dplyr::select(iso3c, resid_gdp_lat), by = c(\"iso_a3\" = \"iso3c\"))\n\n  # Breaks for a symmetric diverging map around zero residual\n  brks &lt;- c(-Inf, -0.6, -0.3, -0.15, 0, 0.15, 0.3, 0.6, Inf)\n  map_dat$res_bin &lt;- cut(map_dat$resid_gdp_lat, breaks = brks, include.lowest = TRUE)\n\n  # Plot\n  ggplot(map_dat) +\n    geom_sf(aes(fill = res_bin), color = \"white\", size = 0.1) +\n    scale_fill_brewer(type = \"div\", palette = \"RdBu\", direction = -1, na.value = \"#e5e7eb\",\n                      name = \"Luck index\n(GDP~vs~|lat| residual)\") +\n    labs(title = \"Outperformers and Underperformers — Geography of Luck\",\n         subtitle = \"Residuals from log(GDP per capita) ~ absolute latitude, 2020\",\n         caption = \"Data: World Bank (WDI), Natural Earth. Negative = underperforming latitude; positive = outperforming.\") +\n    theme(legend.position = \"right\")\n} else {\n  message(\"Optional map disabled: install.packages(c('sf','rnaturalearth','rnaturalearthdata')) to enable the choropleth.\")\n}\n\n\n\n\n\n\n\n\n\nHow to read: Blue shades underperform their latitude (negative residuals); red shades outperform (positive residuals). Neutral grays are missing data."
  },
  {
    "objectID": "stories/geography_of_luck.html#reflection",
    "href": "stories/geography_of_luck.html#reflection",
    "title": "🧭 The Geography of Luck",
    "section": "7. Reflection",
    "text": "7. Reflection\n\nThe sun may rise for everyone, but it still shines longer for some.\n\nLatitude once dictated agriculture, disease, and labor. Today, it still whispers through economies — a relic of environmental inheritance.\nYet each bright outlier on the map is a defiance of fate: policy and ingenuity turning geography into geography’s undoing."
  },
  {
    "objectID": "stories/geography_of_luck.html#technical-appendix",
    "href": "stories/geography_of_luck.html#technical-appendix",
    "title": "🧭 The Geography of Luck",
    "section": "8. Technical Appendix",
    "text": "8. Technical Appendix\n\nPackages: WDI, rnaturalearth, sf, tidyverse, janitor, scales\n\nYear: 2020 snapshot (World Bank)\n\nTransforms: log10(GDP per capita); residuals from lm(gdp_log ~ abs_lat)\n\nCRS: EPSG:4326 (WGS84)\n\nReproducibility: Set a specific year for comparability; extend to multi‑year to track weakening/strengthening latitude effects.\n\n\n\nCode\n# Time evolution — correlation weakening/strengthening over time (1980–2023)\nhist &lt;- WDI(indicator = c(gdp = \"NY.GDP.PCAP.KD\"),\n            start = 1980, end = 2023, extra = TRUE) |&gt;\n  janitor::clean_names() |&gt;\n  dplyr::filter(region != \"Aggregates\") |&gt;\n  dplyr::mutate(\n    # make sure latitude is numeric before abs()\n    latitude = suppressWarnings(readr::parse_number(as.character(latitude))),\n    abs_lat  = abs(latitude),\n    gdp_log  = log10(gdp)\n  ) |&gt;\n  dplyr::group_by(year) |&gt;\n  dplyr::summarize(\n    r_lat_gdp = cor(abs_lat, gdp_log, use = \"complete.obs\"),\n    .groups = \"drop\"\n  )\n\nggplot(hist, aes(year, r_lat_gdp)) +\n  geom_line() +\n  labs(\n    title = \"Latitude–Wealth Correlation Over Time\",\n    x = \"Year\", y = \"Correlation r (|lat| vs log GDP per capita)\"\n  )"
  }
]