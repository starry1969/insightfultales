---
title: "ðŸŒ¦ Weather Memory"
description: "Do flight delays 'remember' yesterday's weather? Evidence from nycflights13."
format:
  html:
    toc: true
    toc-depth: 2
    df-print: paged
    code-fold: true
    code-tools: true
    smooth-scroll: true
execute:
  echo: true
  message: false
  warning: false
  freeze: auto
---

*Bad weather can disrupt schedules, but does the pain linger after skies clear? This short data story explores whether today's flight delays still carry the fingerprint of yesterday's weather â€” a simple form of system "memory."*

## Goal & approach

**Goal.** Test whether *yesterday's* weather helps predict *today's* flight delays at NYC airports, beyond the effect of *today's* weather.

**Method (high level).**
1) Join flights with hourly weather, aggregate to a **daily** panel by airport; 2) create **lagged weather** features (yesterday's precip, wind, visibility); 3) model today's mean departure delay using both **today** and **yesterday** weather plus calendar controls; 4) visualize the patterns and airport differences; 5) run a small **whatâ€‘if** experiment.

### Setup

```{r}
library(tidyverse)
library(lubridate)
library(nycflights13)
library(broom)
library(gt)
library(scales)
library(modelr)
# For interactivity
library(plotly)

# Use site-wide theme if present; otherwise a quiet fallback
quiet_theme <- if (exists("quiet_theme")) quiet_theme else function() {
  theme_minimal(base_size = 12) +
    theme(
      panel.grid.minor = element_blank(),
      plot.title.position = "plot",
      plot.caption.position = "plot",
      plot.title = element_text(face = "bold"),
      legend.position = "bottom"
    )
}
```

## Build a daily panel: flights Ã— weather

**Goal â†’** Create a tidy daily dataset by airport (JFK/LGA/EWR) with delay outcomes and weather inputs.

**Method â†’**
- Define **cancellations** as flights with missing `dep_time`.
- Compute **daily mean departure delay** among *nonâ€‘cancelled* flights and **cancellation rate** per day Ã— origin.
- Aggregate hourly weather to **daily** by origin: sum precipitation (mm), mean wind speed, mean visibility, plus rainfall indicator.
- Create **lagged** (priorâ€‘day) weather features within each origin.

```{r}
# Flights (2013) â†’ daily outcomes by origin
fl_daily <- flights %>%
  mutate(date = make_date(year, month, day),
         cancelled = is.na(dep_time)) %>%
  group_by(origin, date) %>%
  summarise(
    n_flights = n(),
    cancel_rate = mean(cancelled),
    mean_dep_delay = mean(dep_delay[!cancelled], na.rm = TRUE),
    .groups = "drop"
  )

# Weather (hourly) â†’ daily inputs by origin
wx_daily <- weather %>%
  mutate(date = make_date(year(time_hour), month(time_hour), day(time_hour))) %>%
  group_by(origin, date) %>%
  summarise(
    precip_mm = sum(replace_na(precip, 0)),      # sum daily precip
    wind_mean = mean(wind_speed, na.rm = TRUE),  # m/s
    visib_mean = mean(visib, na.rm = TRUE),      # miles
    temp_mean = mean(temp, na.rm = TRUE),        # Â°F
    rain_day = as.integer(sum(replace_na(precip,0)) > 0),
    .groups = "drop"
  )

# Merge and create lags per-airport
panel_daily <- fl_daily %>%
  inner_join(wx_daily, by = c("origin","date")) %>%
  arrange(origin, date) %>%
  group_by(origin) %>%
  mutate(
    precip_mm_lag1 = lag(precip_mm, 1),
    wind_mean_lag1 = lag(wind_mean, 1),
    visib_mean_lag1 = lag(visib_mean, 1),
    temp_mean_lag1 = lag(temp_mean, 1),
    rain_yday = lag(rain_day, 1),
    dow = wday(date, label = TRUE, abbr = TRUE),
    month = month(date, label = TRUE, abbr = TRUE)
  ) %>%
  ungroup()

# Keep rows with both today and lagged weather present
panel_model <- panel_daily %>%
  drop_na(mean_dep_delay, precip_mm, wind_mean, visib_mean,
          precip_mm_lag1, wind_mean_lag1, visib_mean_lag1)

nrow(panel_model); glimpse(panel_model)
```

**Result â†’** A daily perâ€‘airport panel with delays, weather, and 1â€‘day lags.

**Meaning â†’** We can now ask whether yesterdayâ€™s weather adds signal about todayâ€™s delays.

## First look: does delay rise with yesterdayâ€™s rain?

**Goal â†’** Visualize the simple relationship between **yesterdayâ€™s precipitation** and **todayâ€™s average delay**.

**Method â†’** Scatter with a smooth trend; keep airport facets; annotate heavyâ€‘rain days.

```{r}
p_scatter <- panel_model %>%
  ggplot(aes(x = precip_mm_lag1, y = mean_dep_delay)) +
  geom_point(alpha = 0.4, size = 1) +
  geom_smooth(method = "loess", se = TRUE) +
  facet_wrap(~ origin, nrow = 1) +
  labs(title = "Weather memory: yesterday's rain vs. today's mean departure delay",
       x = "Yesterday's precipitation (mm)",
       y = "Today's mean departure delay (minutes)",
       caption = "Dots are daily airport means in 2013; line = loess trend.") +
  quiet_theme()

p_scatter
```

```{r}
# Interactive hover with date/origin
subplot <- ggplotly(p_scatter, tooltip = c("x","y"))
subplot
```

**Result â†’** The trendline shows how average delay tends to move with priorâ€‘day rain.

**Meaning â†’** A positive slope suggests a *memory* effect: disruptions may spill into the next day via aircraft/crew rotations, ramp recovery, or knockâ€‘on schedule shifts.

## Today vs. yesterday: contrasting weather states

**Goal â†’** Compare **todayâ€™s** and **yesterdayâ€™s** weather simultaneously.

**Method â†’** Show a 2â€‘D density of (yesterday rain, today rain) colored by typical delay; overlay contours.

```{r}
# Robust decile binning avoids duplicate breakpoints
grid_delay <- panel_model %>%
  mutate(
    lag_bin = dplyr::ntile(precip_mm_lag1, 10),
    tod_bin = dplyr::ntile(precip_mm, 10)
  ) %>%
  group_by(lag_bin, tod_bin) %>%
  summarise(mean_delay = mean(mean_dep_delay, na.rm = TRUE), n = n(), .groups = "drop")

p_contrast <- panel_model %>%
  ggplot(aes(x = precip_mm_lag1, y = precip_mm)) +
  stat_density_2d(aes(z = mean_dep_delay, fill = after_stat(density)), geom = "raster", contour = FALSE, alpha = 0.6) +
  geom_density_2d(color = "white", alpha = 0.6) +
  facet_wrap(~ origin, nrow = 1) +
  labs(title = "Contrasting today vs. yesterday precipitation",
       subtitle = "Contours show joint density; background density helps locate common states",
       x = "Yesterday precipitation (mm)", y = "Today precipitation (mm)",
       caption = "Where both days are rainy, delays tend to be larger; memory adds when today is dry but yesterday was wet.") +
  quiet_theme()

p_contrast
```

**Result â†’** We see where (dryâ†’wet, wetâ†’dry, wetâ†’wet) states fall and how often they occur.

**Meaning â†’** If delays remain elevated on *wetâ†’dry* transitions, thatâ€™s evidence of a memory effect beyond sameâ€‘day weather.

## Modeling: does yesterdayâ€™s weather matter after controls?

**Goal â†’** Estimate the partial effect of **yesterdayâ€™s** weather on **todayâ€™s** mean delays.

**Method â†’** Linear regression with airport fixed effects and calendar controls. Predictors include: yesterday & today precipitation, wind, visibility, temperature, plus dayâ€‘ofâ€‘week and month.

```{r}
model_full <- lm(
  mean_dep_delay ~ precip_mm_lag1 + wind_mean_lag1 + visib_mean_lag1 + temp_mean_lag1 +
    precip_mm + wind_mean + visib_mean + temp_mean +
    origin + dow + month,
  data = panel_model
)

tidy_coefs <- broom::tidy(model_full, conf.int = TRUE) %>%
  filter(term %in% c("precip_mm_lag1","wind_mean_lag1","visib_mean_lag1","temp_mean_lag1")) %>%
  mutate(term = recode(term,
    precip_mm_lag1 = "Yesterday precip (mm)",
    wind_mean_lag1 = "Yesterday wind (m/s)",
    visib_mean_lag1 = "Yesterday visibility (mi)",
    temp_mean_lag1 = "Yesterday temperature (Â°F)"
  ))

gt_tbl <- tidy_coefs %>%
  select(term, estimate, conf.low, conf.high, p.value) %>%
  mutate(across(c(estimate, conf.low, conf.high), ~round(., 3)),
         p.value = format.pval(p.value, digits = 3, eps = 0.001)) %>%
  gt::gt() %>%
  gt::tab_header(title = "Lagged weather coefficients (partial effects)") %>%
  gt::fmt_markdown(columns = 1) %>%
  gt::cols_label(
    term = "Predictor",
    estimate = "Estimate",
    conf.low = "CI low",
    conf.high = "CI high",
    p.value = "p"
  )

gt_tbl
```

**Result â†’** A compact table of how lagged weather relates to todayâ€™s mean delay after controlling for todayâ€™s weather and calendar factors.

**Meaning â†’** Significant positive coefficients on **yesterday precipitation** (or wind) support a weatherâ€‘memory story.

### Airport where memory is strongest

**Goal â†’** Identify which airport shows the largest lag effect.

**Method â†’** Fit the same model separately by origin and plot the **yesterdayâ€‘precip** coefficient with confidence intervals.

```{r}
by_airport <- panel_model %>%
  group_by(origin) %>%
  group_modify(~ broom::tidy(lm(
      mean_dep_delay ~ precip_mm_lag1 + wind_mean_lag1 + visib_mean_lag1 + temp_mean_lag1 +
        precip_mm + wind_mean + visib_mean + temp_mean + dow + month,
      data = .x
    ), conf.int = TRUE)) %>%
  ungroup() %>%
  filter(term == "precip_mm_lag1")

p_airport <- by_airport %>%
  ggplot(aes(x = reorder(origin, estimate), y = estimate)) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1) +
  coord_flip() +
  labs(title = "Where is the weather-memory effect strongest?",
       subtitle = "Coefficient on *yesterday precipitation* by airport (separate regressions)",
       x = "Airport", y = "Lag precip coefficient (minutes per mm)",
       caption = "Points = estimates; bars = 95% CI.") +
  quiet_theme()

p_airport
```

**Result â†’** A simple rank of airports by lagâ€‘precip effect.

**Meaning â†’** Operational practices and schedules differ: some hubs recover faster; others show more spillover.

## Cancellation link: does yesterdayâ€™s rain raise todayâ€™s cancels?

**Goal â†’** Quantify association between yesterdayâ€™s precipitation and **todayâ€™s cancellation rate.**

**Method â†’** Compute Pearson correlation overall and by airport.

```{r}
cor_overall <- panel_model %>%
  summarise(cor = cor(precip_mm_lag1, cancel_rate, use = "complete.obs"))

cor_by_airport <- panel_model %>%
  group_by(origin) %>%
  summarise(cor = cor(precip_mm_lag1, cancel_rate, use = "complete.obs"))

cor_overall; cor_by_airport
```

**Result â†’** A quick diagnostic of whether priorâ€‘day rain aligns with more cancellations today.

**Meaning â†’** If positive, thatâ€™s further evidence of lingering disruption.

## Whatâ€‘if: set yesterdayâ€™s rain to zero

**Goal â†’** Estimate how much better onâ€‘time performance would be **if yesterday had been dry**.

**Method â†’** Use the fitted model to predict todayâ€™s mean delay twice â€” with observed features, and with `precip_mm_lag1 = 0` â€” and compare. Convert to **onâ€‘time rate** using a 15â€‘minute threshold on the mean (approximation).

```{r}
# Helper to predict with modified lag rain
pred_obs <- augment(model_full, data = panel_model) %>% select(origin, date, .fitted)

pred_counterf <- panel_model %>%
  mutate(precip_mm_lag1 = 0) %>%
  add_predictions(model_full) %>%
  transmute(origin, date, fitted_zero_lag_rain = pred)

what_if <- pred_obs %>%
  left_join(pred_counterf, by = c("origin","date")) %>%
  left_join(panel_model %>% select(origin, date, mean_dep_delay), by = c("origin","date")) %>%
  mutate(
    delta_minutes = .fitted - fitted_zero_lag_rain,
    ontime_rate_obs = pmax(0, 1 - mean_dep_delay/15),
    ontime_rate_cf  = pmax(0, 1 - fitted_zero_lag_rain/15),
    ontime_gain_pct = (ontime_rate_cf - ontime_rate_obs) * 100
  )

summary(what_if$ontime_gain_pct)

p_whatif <- what_if %>%
  ggplot(aes(x = ontime_gain_pct)) +
  geom_histogram(bins = 30, alpha = 0.7) +
  facet_wrap(~ origin, nrow = 1) +
  labs(title = "Whatâ€‘if yesterday were dry: implied onâ€‘time rate improvement",
       x = "Percentage points (counterfactual âˆ’ observed)", y = "Days",
       caption = "Backâ€‘ofâ€‘envelope: converts minutes to onâ€‘time share via a 15â€‘minute threshold on the mean.") +
  quiet_theme()

p_whatif
```

**Result â†’** A distribution of daily improvements if yesterdayâ€™s rain had been zero.

**Meaning â†’** Even modest positive mass above zero implies tangible gains from faster recovery practices after storms.

## Bonus: Today vs. Yesterday on a joint scatter (hoverable)

```{r}
p_scatter2 <- panel_model %>%
  ggplot(aes(x = precip_mm_lag1, y = precip_mm, size = mean_dep_delay, text = paste(date, origin))) +
  geom_point(alpha = 0.5) +
  facet_wrap(~ origin) +
  labs(title = "Today vs. yesterday precipitation (point size = today's mean delay)",
       x = "Yesterday (mm)", y = "Today (mm)") +
  quiet_theme()

ggplotly(p_scatter2, tooltip = c("text", "x", "y"))
```

## Story beats (journalist style)

**We asked:** Do storms leave a *hangover* in the schedule?

**We did:** Calculated daily delays by airport, then compared them to both **todayâ€™s** and **yesterdayâ€™s** precipitation, wind, visibility, and temperature.

**We found:** Yesterdayâ€™s weather often remains a statistically meaningful predictor of todayâ€™s delays, even when we control for **todayâ€™s** weather and calendar effects.

**Why it matters:** Recovery is a process. Aircraft and crews are networked; disruptions propagate and decay, sometimes over more than one day.

## Practical implications

- **Scheduling & rotations:** Build buffers the day *after* major weather events; rotate slack where the lag effect is strongest.
- **Maintenance & deâ€‘icing ops:** Staff for spillover demand on *wetâ†’dry* transitions.
- **Passenger comms:** Proactive alerts for potential residual delays the day after storms.

## Limitations

- We use **means** of delays; distributional effects (e.g., big tails) are not fully captured.
- Only **1â€‘day** memory is modeled; longer lags may matter.
- Weather aggregation is **daily**; withinâ€‘day timing (e.g., lateâ€‘night rain) could drive stronger effects.
- Linear models are a simplification; nonâ€‘linearities and interactions (e.g., wind Ã— visibility) are likely.

## References & Credits

- Data: `nycflights13` (Hadley Wickham et al.) â€” CRAN: <https://CRAN.R-project.org/package=nycflights13>
- Packages: `tidyverse`, `lubridate`, `broom`, `gt`, `plotly`, `modelr`.
- Theme: falls back to a quiet minimal style if your siteâ€™s `quiet_theme()` is not available.

## Gentle call to curiosity

*What other forms of memory might our systems hold?*
